{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;AAAA;AACO,MAAMA,UAAU,GAAG;EAExB;EACA,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EAEV;EACA,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,OAAO;EAEZ;EACA,GAAG,EAAE,GAAG;EACR,IAAI,EAAE,MAAM;EACZ,GAAG,EAAE,OAAO;EACZ,IAAI,EAAE,QAAQ;EACd,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE;CACN;;;;;;;;;;;;;;;ACpE0C;AAE3C,MAAMC,iBAAkB,SAAQC,KAAK;EAAA,QAAAC,CAAA,GACrB,KAAAC,aAAa,GACrB,0EAA0E,GAC1E,2CAA2C,GAC/CC,MAAM,CAACC,IAAI,CAACN,mDAAU,CAAC,CAACO,QAAQ,EAAE;EAAA,QAAAC,EAAA,GAEtB,KAAAC,mBAAmB,GAC/B,kDAAkD;EAEpDC,YAAmBC,OAAe;IAChC,KAAK,CAACA,OAAO,CAAC;IADG,KAAAA,OAAO,GAAPA,OAAO;IAExB,IAAI,CAACC,IAAI,GAAG,mBAAmB;IAC/B,IAAI,CAACC,KAAK,GAAS,IAAIX,KAAK,EAAG,CAACW,KAAK;EACvC;;AAGF,iEAAeZ,iBAAiB;;;;;;;;;;;;;;;;;ACjBU;AACiB;;AAE3D,MAGaa,eAAe;EAE1BJ,YAAA,GAAgB;EAEhB;EACA;EACA;EACAK,MAAMA,CAACJ,OAAgB;IAErB,IAAIK,MAAM,GAAY,EAAE;IAExB,KAAI,IAAIC,MAAM,IAAIN,OAAO,EAAC;MAExB;MACA;MACA,IAAI,EAAEM,MAAM,CAACC,WAAW,EAAE,IAAIlB,mDAAU,CAAC,EAAE;QACzC,MAAM,IAAIC,iEAAiB,CAACA,+EAA+B,CAAC;;MAG9De,MAAM,IAAIhB,mDAAU,CAACiB,MAAM,CAACC,WAAW,EAAE,CAAC;MAE1C;MACA;MACA;MACA;MACA;MACA;MAEAF,MAAM,IAAI,GAAG;;IAIf,OAAOA,MAAM;EAEf;EAEA;EACA;EACA;EACAG,MAAMA,CAACR,OAAgB;IAErB;IACAA,OAAO,IAAI,GAAG;IAEd,IAAIS,QAAQ,GAAY,EAAE;IAC1B,IAAIC,MAAM,GAAY,EAAE;IAExB,KAAI,IAAIJ,MAAM,IAAIN,OAAO,EAAE;MAEzB;MACA,IAAGM,MAAM,IAAE,GAAG,EAAE;QAEd;QACA,IAAIK,CAAC,GAAG,CAAC;QAET;QACAD,MAAM,IAAIJ,MAAM;OAEjB,MAAM;QAEL;QACAK,CAAC,IAAI,CAAC;QAEN;QACA,IAAIA,CAAC,IAAE,CAAC,EAAE;UACR;UACAF,QAAQ,IAAI,GAAG;SAChB,MAAM;UACL;UACD,MAAMG,0BAA0B,GAAGlB,MAAM,CAACC,IAAI,CAACN,mDAAU,CAAC,CAACwB,IAAI,CAACC,GAAG,IAAIzB,mDAAU,CAACyB,GAAG,CAAC,KAAKJ,MAAM,CAAC;UACjG,IAAI,CAACE,0BAA0B,EAAE;YAC/B,MAAM,IAAItB,iEAAiB,CAACA,qFAAqC,CAAC;;UAEpEmB,QAAQ,IAAIG,0BAA0B;UACtCF,MAAM,GAAG,EAAE;;;;IAOjB,OAAOD,QAAQ;EACjB;EAAC,QAAAjB,CAAA;qBAlFUW,eAAe;EAAA;EAAA,QAAAN,EAAA;WAAfM,eAAe;IAAAY,OAAA,EAAfZ,eAAe,CAAAa,IAAA;IAAAC,UAAA,EAFd;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEwBlBC,4DAAA,UAA6B;IAEdA,oDAAA,wBAAiB;IAAAA,0DAAA,EAAY;IACxCA,4DAAA,mBAAyE;IAAtDA,wDAAA,2BAAAK,+DAAAC,MAAA;MAAAN,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAAAS,MAAA,CAAAG,WAAA,GAAAN,MAAA;IAAA,EAAyB,mBAAAO,uDAAA;MAAAb,2DAAA,CAAAQ,GAAA;MAAA,MAAAM,MAAA,GAAAd,2DAAA;MAAA,OAAmBA,yDAAA,CAAAc,MAAA,CAAA5B,MAAA,EAAQ;IAAA,EAA3B;IAA6Bc,0DAAA,EAAW;IAGtFA,uDAAA,SAAI;IAEJA,4DAAA,yBAAmD;IACtCA,oDAAA,aAAM;IAAAA,0DAAA,EAAY;IAC7BA,4DAAA,mBAAgE;IAA7CA,wDAAA,2BAAAgB,+DAAAV,MAAA;MAAAN,2DAAA,CAAAQ,GAAA;MAAA,MAAAS,MAAA,GAAAjB,2DAAA;MAAA,OAAAA,yDAAA,CAAAiB,MAAA,CAAAC,YAAA,GAAAZ,MAAA;IAAA,EAA0B;IAAmBN,0DAAA,EAAW;;;;IAPxDA,uDAAA,GAAyB;IAAzBA,wDAAA,YAAAqB,MAAA,CAAAT,WAAA,CAAyB;IAOzBZ,uDAAA,GAA0B;IAA1BA,wDAAA,YAAAqB,MAAA,CAAAH,YAAA,CAA0B;;;;;;IAIjDlB,4DAAA,UAA6B;IAEdA,oDAAA,wBAAiB;IAAAA,0DAAA,EAAY;IACxCA,4DAAA,mBAAyE;IAAtDA,wDAAA,2BAAAsB,+DAAAhB,MAAA;MAAAN,2DAAA,CAAAuB,GAAA;MAAA,MAAAC,MAAA,GAAAxB,2DAAA;MAAA,OAAAA,yDAAA,CAAAwB,MAAA,CAAAC,WAAA,GAAAnB,MAAA;IAAA,EAAyB,mBAAAoB,uDAAA;MAAA1B,2DAAA,CAAAuB,GAAA;MAAA,MAAAI,MAAA,GAAA3B,2DAAA;MAAA,OAAmBA,yDAAA,CAAA2B,MAAA,CAAArC,MAAA,EAAQ;IAAA,EAA3B;IAA6BU,0DAAA,EAAW;IAGtFA,uDAAA,SAAI;IAEJA,4DAAA,yBAAmD;IACtCA,oDAAA,aAAM;IAAAA,0DAAA,EAAY;IAC7BA,4DAAA,mBAAgE;IAA7CA,wDAAA,2BAAA4B,+DAAAtB,MAAA;MAAAN,2DAAA,CAAAuB,GAAA;MAAA,MAAAM,MAAA,GAAA7B,2DAAA;MAAA,OAAAA,yDAAA,CAAA6B,MAAA,CAAAC,YAAA,GAAAxB,MAAA;IAAA,EAA0B;IAAmBN,0DAAA,EAAW;;;;IAPxDA,uDAAA,GAAyB;IAAzBA,wDAAA,YAAA+B,MAAA,CAAAN,WAAA,CAAyB;IAOzBzB,uDAAA,GAA0B;IAA1BA,wDAAA,YAAA+B,MAAA,CAAAD,YAAA,CAA0B;;;ADlDnD,MAKaE,YAAY;EAgBvBnD,YACUoD,KAAuB;IAAvB,KAAAA,KAAK,GAALA,KAAK;IAhBf,KAAAC,KAAK,GAAG,cAAc;EAiBnB;EAEHC,QAAQA,CAAA;IAEN;IACA,IAAI,CAACC,IAAI,GAAG,SAAS;IACrB,IAAI,CAACxB,WAAW,GAAG,EAAE;IACrB,IAAI,CAACa,WAAW,GAAG,EAAE;IACrB,IAAI,CAACP,YAAY,GAAG,EAAE;IACtB,IAAI,CAACY,YAAY,GAAG,EAAE;IAEtB,IAAI,CAACO,IAAI,GAAG;MACVC,YAAY,EAAG,iBAAiB;MAChCC,KAAK,EAAG;;;;;;;;;;;;;;;;;;;KAmBT;EAEH;EAEArD,MAAMA,CAAA;IACJ,IAAI,CAACgC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACA,YAAY,GAAG,IAAI,CAACe,KAAK,CAAC/C,MAAM,CAAC,IAAI,CAAC0B,WAAW,CAAC;EACzD;EAEAtB,MAAMA,CAAA;IACJ,IAAI,CAACwC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACA,YAAY,GAAG,IAAI,CAACG,KAAK,CAAC3C,MAAM,CAAC,IAAI,CAACmC,WAAW,CAAC;EACzD;EAEAe,KAAKA,CAAA;IACH,IAAI,CAAC5B,WAAW,GAAG,EAAE;IACrB,IAAI,CAACM,YAAY,GAAG,EAAE;IACtB,IAAI,CAACO,WAAW,GAAG,EAAE;IACrB,IAAI,CAACK,YAAY,GAAG,EAAE;EACxB;EAAC,QAAAxD,CAAA;qBArEU0D,YAAY,EAAAhC,+DAAA,CAAA0C,0FAAA;EAAA;EAAA,QAAA/D,EAAA;UAAZqD,YAAY;IAAAW,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRzBjD,4DAAA,qBAA0E;QAC7BA,oDAAA,gBAAS;QAAAA,0DAAA,EAAO;QAG7DA,4DAAA,aAAuB;QAErBA,uDAAA,SAAI;QAEJA,4DAAA,aAA0B;QACxBA,oDAAA,qEACF;QAAAA,0DAAA,EAAM;QAENA,uDAAA,SAAI;QAEJA,4DAAA,cAA0B;QAEtBA,wDAAA,2BAAAmD,gEAAA7C,MAAA;UAAA,OAAA4C,GAAA,CAAAd,IAAA,GAAA9B,MAAA;QAAA,EAAkB,oBAAA8C,yDAAA;UAAA,OACRF,GAAA,CAAAV,KAAA,EAAO;QAAA,EADC;QAElBxC,4DAAA,2BAAmD;QACjDA,oDAAA,iBACF;QAAAA,0DAAA,EAAmB;QACnBA,4DAAA,2BAAmD;QACjDA,oDAAA,iBACF;QAAAA,0DAAA,EAAmB;QAIvBA,uDAAA,UAAI;QAEJA,wDAAA,KAAAsD,4BAAA,kBAYM;QAENtD,wDAAA,KAAAuD,4BAAA,kBAYM;QAENvD,4DAAA,UAAI;QAAAA,oDAAA,oBAAY;QAAAA,0DAAA,EAAK;QAErBA,4DAAA,cAAkB;QAAAA,oDAAA,IAAqB;QAAAA,0DAAA,EAAM;QAE7CA,4DAAA,UAAI;QAAAA,oDAAA,aAAK;QAAAA,0DAAA,EAAK;QAEdA,4DAAA,cAAkB;QAAAA,oDAAA,IAAc;QAAAA,0DAAA,EAAM;QAEtCA,uDAAA,UAAI;QAEJA,4DAAA,cAA0B;QAEtBA,uDAAA,YAAkC;QACpCA,0DAAA,EAAI;QAGNA,uDAAA,UAAI;QAENA,0DAAA,EAAM;;;QA3DAA,uDAAA,IAAkB;QAAlBA,wDAAA,YAAAkD,GAAA,CAAAd,IAAA,CAAkB;QAEApC,uDAAA,GAAmB;QAAnBA,wDAAA,oBAAmB;QAGnBA,uDAAA,GAAmB;QAAnBA,wDAAA,oBAAmB;QAQnCA,uDAAA,GAAqB;QAArBA,wDAAA,SAAAkD,GAAA,CAAAd,IAAA,cAAqB;QAcrBpC,uDAAA,GAAqB;QAArBA,wDAAA,SAAAkD,GAAA,CAAAd,IAAA,cAAqB;QAgBTpC,uDAAA,GAAqB;QAArBA,+DAAA,CAAAkD,GAAA,CAAAb,IAAA,CAAAC,YAAA,CAAqB;QAIrBtC,uDAAA,GAAc;QAAdA,+DAAA,CAAAkD,GAAA,CAAAb,IAAA,CAAAE,KAAA,CAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DwB;AAEb;AAEE;AACgC;AAC5B;;AAEnD,MAaasB,SAAS;EAAA,QAAAvF,CAAA;qBAATuF,SAAS;EAAA;EAAA,QAAAlF,EAAA;UAATkF,SAAS;IAAAC,SAAA,GAFR9B,wDAAY;EAAA;EAAA,QAAA+B,EAAA;cANtBN,oEAAa,EACbC,uDAAW,EACXC,yFAAuB,EACvBC,4DAAc;EAAA;;AAKI;;sHAATC,SAAS;IAAAG,YAAA,GAXlBhC,wDAAY;IAAAiC,OAAA,GAGZR,oEAAa,EACbC,uDAAW,EACXC,yFAAuB,EACvBC,4DAAc;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACdyC;AACO;AACT;AACA;AACI;AACA;;AAE7D,MAkBaA,cAAc;EAAA,QAAAtF,CAAA;qBAAdsF,cAAc;EAAA;EAAA,QAAAjF,EAAA;UAAdiF;EAAc;EAAA,QAAAG,EAAA;cAhBvBO,uEAAgB,EAChBJ,qEAAe,EACfK,uEAAgB,EAChBF,mEAAc,EACdF,4EAAkB,EAClBC,mEAAc,EAGdE,uEAAgB,EAChBJ,qEAAe,EACfK,uEAAgB,EAChBF,mEAAc,EACdF,4EAAkB,EAClBC,mEAAc;EAAA;;AAGS;;sHAAdR,cAAc;IAAAK,OAAA,GAhBvBK,uEAAgB,EAChBJ,qEAAe,EACfK,uEAAgB,EAChBF,mEAAc,EACdF,4EAAkB,EAClBC,mEAAc;IAAAI,OAAA,GAGdF,uEAAgB,EAChBJ,qEAAe,EACfK,uEAAgB,EAChBF,mEAAc,EACdF,4EAAkB,EAClBC,mEAAc;EAAA;AAAA;;;;;;;;;;;;;;ACxBlB;AACA;AACA;AAEO,MAAMK,WAAW,GAAG;EACzBC,UAAU,EAAE;CACb;AAED;;;;;;;AAOA;;;;;;;;;;;;;;;;ACd+C;AAGF;AACY;AAEzD,IAAID,6EAAsB,EAAE;EAC1BE,6DAAc,EAAE;;AAGlBC,sEAAA,EAAwB,CAACE,eAAe,CAACjB,sDAAS,CAAC,CAChDkB,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC","sources":["./projects/ngx-morse/src/lib/dictionary.ts","./projects/ngx-morse/src/lib/exceptions/invalid-input.ts","./projects/ngx-morse/src/lib/ngx-morse.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/material.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["// JSON representing the morse code chart\nexport const Dictionary = {\n  \n  // Letters\n  'a': '.-',\n  'b': '-...',\n  'c': '-.-.',\n  'd': '-..',\n  'e': '.',\n  'f': '..-.',\n  'g': '--.',\n  'h': '....',\n  'i': '..',\n  'j': '.---',\n  'k': '-.-',\n  'l': '.-..',\n  'm': '--',\n  'n': '-.',\n  'o': '---',\n  'p': '.--.',\n  'q': '--.-',\n  'r': '.-.',\n  's': '...',\n  't': '-',\n  'u': '..-',\n  'v': '...-',\n  'w': '.--',\n  'x': '-..-',\n  'y': '-.--',\n  'z': '--..',\n  'ä': '.-.-',\n  'á': '.--.-',\n  'å': '.--.-',\n  'é': '.-..',\n  'ñ': '-.--',\n  'ö': '--.',\n  'ü': '.--',\n\n  // Digits\n  '0': '-----',\n  '1': '.----',\n  '2': '..---',\n  '3': '...--',\n  '4': '....-',\n  '5': '.....',\n  '6': '-....',\n  '7': '--...',\n  '8': '---..',\n  '9': '----.',\n\n  // Special characters\n  ' ': '/',\n  '\\n': '.-.-',\n  '&': '.-...',\n  '\\'': '.----.',\n  '@': '.--.-.',\n  ')': '-.--.-',\n  '(': '-.--.',\n  ':': '---...',\n  ',': '--..--',\n  '=': '-...-',\n  '!': '-.-.--',\n  '.': '.-.-.-',\n  '-': '-....-',\n  '+': '.-.-.',\n  '\"': '.-..-.',\n  '?': '..--..',\n  '/': '-..-.',\n}\n","import { Dictionary } from \"../dictionary\";\n\nclass InvalidInputError extends Error {\n  public static INVALID_INPUT: string =\n        \"Valid inputs are: Alphabets, digits (0-9) and a few special characters. \" +\n        \"Please see the list of valid characters: \" +\n    Object.keys(Dictionary).toString();\n\n  public static INVALID_MORSE_INPUT: string =\n    \"String contains invalid or corrupted Morse code.\";\n\n  constructor(public message: string) {\n    super(message);\n    this.name = \"InvalidInputError\";\n    this.stack = (<any>new Error()).stack;\n  }\n}\n\nexport default InvalidInputError;\n","import { Injectable } from '@angular/core';\nimport { Dictionary } from './dictionary';\nimport InvalidInputError from './exceptions/invalid-input';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMorseService {\n\n  constructor() { }\n\n  //\n  // Encoding : text to morse\n  //\n  encode(message : string) :string {\n\n    let cipher : string = '';\n\n    for(let letter of message){\n\n      // Looks up the dictionary and adds the correspponding morse code\n      // along with a space to separate morse codes for different characters\n      if (!(letter.toLowerCase() in Dictionary)) {\n        throw new InvalidInputError(InvalidInputError.INVALID_INPUT);\n      }\n\n      cipher += Dictionary[letter.toLowerCase()];\n\n      // if(letter!=' ') {\n      //   console.log(letter,Dictionary[letter.toLowerCase()])\n      // } else {\n      //   // 1 space indicates different characters and 2 indicates different words\n      //   cipher += ' ';\n      // }\n\n      cipher += ' ';\n\n    }\n\n    return cipher;\n\n  }\n\n  //\n  // Decoding : morse to text\n  //\n  decode(message : string) :string {\n\n    // Extra space added at the end to access the last morse code \n    message += ' ';\n  \n    let decipher : string = ''; \n    let citext : string = '';\n    \n    for(let letter of message) {\n\n      // Check for space \n      if(letter!=' ') {\n\n        // Counter to keep track of space \n        var i = 0;\n      \n        // Storing morse code of a single character \n        citext += letter; \n\n      } else {\n\n        // If i = 1 that indicates a new character \n        i += 1;\n      \n        // If i = 2 that indicates a new word \n        if (i==2) {\n          // Adding space to separate words \n          decipher += ' '\n        } else {\n          // Accessing the keys using their values\n\t        const letterDecodedFromMorseCode = Object.keys(Dictionary).find(key => Dictionary[key] === citext);\n          if (!letterDecodedFromMorseCode) {\n            throw new InvalidInputError(InvalidInputError.INVALID_MORSE_INPUT);\n          }\n          decipher += letterDecodedFromMorseCode;\n          citext = '';\n        }\n      \n      }\n\n    }\n  \n    return decipher;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { NgxMorseService } from '../../projects/ngx-morse/src/lib/ngx-morse.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'ngx-morse-ws';\n\n  mode : string;\n\n  encodeInput : string;\n  decodeInput : string;\n\n  encodeOutput : string;\n  decodeOutput : string;\n\n  code : {\n    installation : string,\n    usage : string\n  };\n\n  constructor(\n    private morse : NgxMorseService\n  ) {}\n\n  ngOnInit() {\n\n    // Init variables\n    this.mode = 'ENCODER';\n    this.encodeInput = '';\n    this.decodeInput = '';\n    this.encodeOutput = '';\n    this.decodeOutput = '';\n\n    this.code = {\n      installation : 'npm i ngx-morse',\n      usage : `import { NgxMorseService } from 'ngx-morse';\n\n@Component({...})\n\nexport class YourComponent {\n\n    constructor(private morse: NgxMorseService) {}\n\n    encode() {\n        let encoded = this.morse.encode('hello world!');\n        // .... . .-.. .-.. --- / .-- --- .-. .-.. -.. -.-.--\n    }\n\n    decode() {\n        let decoded = this.morse.decode('.... . .-.. .-.. --- / .-- --- .-. .-.. -.. -.-.--');\n        // hello world!\n    }\n\n}`\n    }\n\n  }\n\n  encode(){\n    this.encodeOutput = '';\n    this.encodeOutput = this.morse.encode(this.encodeInput);\n  }\n\n  decode(){\n    this.decodeOutput = '';\n    this.decodeOutput = this.morse.decode(this.decodeInput);\n  }\n\n  reset(){\n    this.encodeInput = '';\n    this.encodeOutput = '';\n    this.decodeInput = '';\n    this.decodeOutput = '';\n  }\n\n}\n","<mat-toolbar color=\"primary\" style=\"position:sticky; top:0; z-index: 999\">\n  <span style=\"display: flex; flex-grow: 1;\">Ngx-Morse</span>\n</mat-toolbar>\n\n<div class=\"container\"> \n\n  <br><br>\n\n  <div class=\"align-center\">\n    A simple morse code encoder and decoder library for Angular.\n  </div>\n\n  <br><br>\n\n  <div class=\"align-center\">\n    <mat-radio-group\n      [(ngModel)]=\"mode\"\n      (change)=\"reset()\">\n      <mat-radio-button [value]=\"'ENCODER'\" class=\"mx-4\">\n        Encoder\n      </mat-radio-button>\n      <mat-radio-button [value]=\"'DECODER'\" class=\"mx-4\">\n        Decoder\n      </mat-radio-button>\n    </mat-radio-group>\n  </div>\n\n  <br>\n\n  <div *ngIf=\"mode=='ENCODER'\">\n    <mat-form-field appearance=\"outline\" class=\"w-100\">\n      <mat-label>Enter text input!</mat-label>\n      <textarea matInput [(ngModel)]=\"encodeInput\" rows=\"4\" (keyup)=\"encode()\"></textarea>\n    </mat-form-field>\n\n    <br>\n\n    <mat-form-field appearance=\"outline\" class=\"w-100\">\n      <mat-label>Output</mat-label>\n      <textarea matInput [(ngModel)]=\"encodeOutput\" rows=\"4\" readonly></textarea>\n    </mat-form-field>\n  </div>\n\n  <div *ngIf=\"mode=='DECODER'\">\n    <mat-form-field appearance=\"outline\" class=\"w-100\">\n      <mat-label>Enter code input!</mat-label>\n      <textarea matInput [(ngModel)]=\"decodeInput\" rows=\"4\" (keyup)=\"decode()\"></textarea>\n    </mat-form-field>\n\n    <br>\n\n    <mat-form-field appearance=\"outline\" class=\"w-100\">\n      <mat-label>Output</mat-label>\n      <textarea matInput [(ngModel)]=\"decodeOutput\" rows=\"4\" readonly></textarea>\n    </mat-form-field>\n  </div>\n\n  <h4>Installation</h4>\n\n  <pre class=\"code\">{{code.installation}}</pre>\n\n  <h4>Usage</h4>\n\n  <pre class=\"code\">{{code.usage}}</pre>\n\n  <br>\n\n  <div class=\"align-center\">\n    <a matTooltip=\"Github\" target=\"_blank\" href=\"https://github.com/monkeyscript/ngx-morse\">\n      <i class=\"fa fa-github fa-lg\"></i>\n    </a>\n  </div>\n\n  <br><br>\n\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MaterialModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from \"@angular/core\";\n\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\n\n@NgModule({\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatRadioModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatRadioModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n})\nexport class MaterialModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["Dictionary","InvalidInputError","Error","_","INVALID_INPUT","Object","keys","toString","_2","INVALID_MORSE_INPUT","constructor","message","name","stack","NgxMorseService","encode","cipher","letter","toLowerCase","decode","decipher","citext","i","letterDecodedFromMorseCode","find","key","factory","ɵfac","providedIn","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","AppComponent_div_17_Template_textarea_ngModelChange_4_listener","$event","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","encodeInput","AppComponent_div_17_Template_textarea_keyup_4_listener","ctx_r4","ɵɵelement","AppComponent_div_17_Template_textarea_ngModelChange_9_listener","ctx_r5","encodeOutput","ɵɵadvance","ɵɵproperty","ctx_r0","AppComponent_div_18_Template_textarea_ngModelChange_4_listener","_r7","ctx_r6","decodeInput","AppComponent_div_18_Template_textarea_keyup_4_listener","ctx_r8","AppComponent_div_18_Template_textarea_ngModelChange_9_listener","ctx_r9","decodeOutput","ctx_r1","AppComponent","morse","title","ngOnInit","mode","code","installation","usage","reset","ɵɵdirectiveInject","i1","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","AppComponent_Template_mat_radio_group_ngModelChange_11_listener","AppComponent_Template_mat_radio_group_change_11_listener","ɵɵtemplate","AppComponent_div_17_Template","AppComponent_div_18_Template","ɵɵtextInterpolate","BrowserModule","FormsModule","BrowserAnimationsModule","MaterialModule","AppModule","bootstrap","_3","declarations","imports","MatButtonModule","MatFormFieldModule","MatInputModule","MatRadioModule","MatToolbarModule","MatTooltipModule","exports","environment","production","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}